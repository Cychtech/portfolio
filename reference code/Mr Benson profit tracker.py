# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1awIaWsj151bDURByENUIoGxYKO45n1wo
"""

# -*- coding: utf-8 -*-
"""
Created on Nov 2023

@author: Group 01
"""
import datetime

def get_positive_float_input(prompt):
    while True:
        try:
            value = float(input(prompt))
            if value < 0:
                print("Value cannot be negative.")
            else:
                return value
        except ValueError:
            print("Please enter a valid numerical value.")

def get_positive_integer_input(prompt):
    while True:
        try:
            value = int(input(prompt))
            if value < 0:
                print("Value cannot be negative.")
            else:
                return value
        except ValueError:
            print("Please enter a valid whole number.")

def get_percentage_input(prompt):
    while True:
        try:
            value = float(input(prompt))
            if value < 0:
                print("Percentage cannot be negative.")
            else:
                return value
        except ValueError:
            print("Please enter a valid numerical value for the percentage.")

def get_item_name():
    #prompts the user to enter the name of the item sold and returns the input.
    while True:
        try:

            return input("Enter the name of the item sold: ")

        except Exception as e:
            print(f"Error: {e}")

def get_buying_price():
    #prompts the user to enter the buying of the item sold and returns the input
    while True:
        try:
            global buying_price
            buying_price = get_positive_float_input("Enter the buying price of the item: ")
            break
        except Exception as e:
            print(f"Error: {e}")

    return buying_price


def get_marked_price():
    #prompts the user to enter the marked price of the item and returns the input
    while True:
        try:
            global marked_price
            marked_price = get_positive_float_input("Enter the marked price of the item: ")
            break
        except ValueError:
            print("Please enter a valid numerical value for the marked price")
    return marked_price


def get_discount(marked_price8):
    #prompts the Mr. Benson to enter the percentage discount, the program computes the discount.
   while True:
        try:
            percentage_discount = get_percentage_input("Enter the percentage discount. If no discount given enter 0: ")
            discount = (percentage_discount / 100) * marked_price
            return discount
        except ValueError:
            print("Please enter a valid numerical value for the percentage discount")

def get_number_of_item_sold():
    #prompts Mr. Benson to enter the number of items sold and return the input
    while True:
        try:
            global quantity
            quantity=int(input("Enter the number of items sold: "))
            if quantity<0:
                print("Quantity cannot be negative.")
            else:
                break
        except ValueError:
            print("Print enter a valid whole number for the quantity")

    return quantity




def calculate_selling_price(marked_price, discount):
    #calculates the selling price of the item based on the marked price and discount
    if discount>marked_price:
        print("Discount cannot be greater than the marked price.")
        return 0
    else:
        selling_price = marked_price - discount
    return selling_price



def calculate_profit(buying_price, selling_price, quantity):
    #calculates the total profit and profit per item for transaction
    total_profit = (selling_price - buying_price) * quantity
    total_profit = round(total_profit, 2)   #Rounding-off 2 d.p.
    profit_per_item = total_profit / quantity if quantity > 0 else 0 #Negative value shows a loss.
    profit_per_item = round(profit_per_item, 2)

    return total_profit, profit_per_item



def calculate_total_profit():
    total_profit = 0.0

    with open('kiosk.txt', 'r') as file:
        for line in file: #Iteration throught the lines in the file.
            profit_index = line.find("Total Profit:") # Looks for the string enclosed in brackets.
            if profit_index != -1:
                profit_str = line[profit_index + len("Total Profit:"):].split(',')[0].strip()
                total_profit += float(profit_str)

    return total_profit

#total_profit = calculate_total_profit()

#print(f'Total Profit: {total_profit}')



def calculate_product_profit():
    total_product_profit = 0.0
    global product_name
    product_name = input("Enter the product name to calculate total profit: ")
    with open('kiosk.txt', 'r') as file:
        for line in file:
            if product_name.title() in line: #Making the first letter capital and the rest lower case.

                product_profit = line.find("Total Profit:")
                if product_profit != -1:
                    profit = line[product_profit + len("Total Profit:"):].split(',')[0].strip()
                    total_product_profit += float(profit)

    return total_product_profit



def daily_profit():
    specific_day_profit = 0.0
    global Day
    Day = input("Enter the date of the Day (dd-mm-yy):")
    with open('kiosk.txt','r') as file:
        for line in file:
            if Day in line:
                day_profit = line.find("Total Profit")
                if day_profit != -1:
                    profit_value = line[day_profit + len("Total Profit:"):].split(',')[0].strip()
                    specific_day_profit += float(profit_value)
    return specific_day_profit





def Total_income():
    total_income = 0
    with open('kiosk.txt','r') as file:
        for line in file:
            wanted = line.find("Total buying price:") #Finds lines with the word (Total buying price)
            if wanted != -1:    # This attribute escapes lines without the wanted string
                Total_buying_price = line[wanted + len("Total buying price:"):].split(',')[0].strip() #Slicing and extracting the numerical value that comes just after the word.
                Total_buying_price= float(Total_buying_price) # Changing the value ffrom string to float for summation.
                total_income += Total_buying_price # Accumulating values from different lines.
    return total_income




def TotalExpenses():
    Worth_of_items_given_away = 0
    with open('kiosk.txt','r') as file:
        for line in file:
            target = line.find("Worth of items given away:")
            if target != -1:
                worth_per_item = line[target + len("Worth of items given away:"):].split(',')[0].strip()
                worth_per_item = float(worth_per_item) #* quantity
                Worth_of_items_given_away += worth_per_item

    Other_expenses = float(input("Enter other expenses:"))

    Total_expenses = Worth_of_items_given_away + Other_expenses


    return Total_expenses






def write_to_file(transactions):
    #Writes the transactional details to a text file
    with open('kiosk.txt', 'a') as file:
        for transaction in transactions:
            file.write(f"{transaction['date']} -- Item: {transaction['item_name']}, "
                       f"Buying Price: {transaction['buying_price']}, "
                       f"Marked Price: {transaction['marked_price']}, "
                       f"Selling Price: {transaction['selling_price']}, "
                       f"Quantity: {transaction['quantity']}, "
                       f"Total buying price: {transaction['Total_buying_price']},"
                       f"Total selling price: {transaction['Total_price']},"
                       f"Total Profit: {transaction['total_profit']}, "
                       f"Profit per Item: {transaction['profit_per_item']},"

                       f"Number of items given away:{transaction['Items_givenAway']},"
                       f"Worth of items given away:{transaction['Worth_ofItems']}\n")
            file.write(" \n")

def read_file():
    #Reads the contents of the transaction file and displays them.
    try:


        with open('kiosk.txt', 'r') as file:
            print("Here is a list of all recorded transactions:\n")

            content = file.readlines()
            for line in content:
                if line.strip() != '':          #Avoids to print empty lines in the console, when lines are removed from the file.
                 print("-------------------------------------------------------------------")
                 print(line)

        print("-------------------------------------------------------------------")

    except FileNotFoundError:
        print("No transactions recorded yet.")




def remove_sale():
    with open('yu.txt', 'r') as file:
        lines = file.readlines()
        nameOfTheItem = input("Write the name of the item to be removed: ") #Prompting user to input the item name

        with open('yes.txt', 'w') as file:
            for line in lines:
                if nameOfTheItem not in line: #Checking lines without the item name
                    file.write(line) # Rewriting the file.



                print(" ")
                print(f"Message: The product: {nameOfTheItem}  was successfully removed.")



def main():
    #In the main function this is where the functions we defined above in our code are called.

    #create an empty list called transaction
    transactions = []

    enter_choice=1
    while enter_choice==1:
        print("\nHello Mr. Benson, Welcome to your new profit tracker app!. Select any option to continue:")
        print("------------------------------------------------------------------")
        print("1. Record a new transaction")
        print("2. View recorded transactions")
        print("3. Calculate total profit for all sales.")
        print("4. Calculate total profit for a specific day.")
        print("5. Calculate total profit for a specific product.")
        print("6. Calculate the Net profit")
        print("7. Remove sale.")
        print("8. Close the program.")
        print(" ")

        choice = input("Enter your choice (1/2/3/4/5/6/7/8): ")
        print(" ")


        if choice == "1":
            item_name = get_item_name()
            global buying_price
            buying_price = get_buying_price()
            marked_price = get_marked_price()
            discount = get_discount(marked_price)
            global quantity
            quantity = get_number_of_item_sold()
            global Total_buying_price
            Total_buying_price = buying_price*quantity

            selling_price = calculate_selling_price(marked_price, discount)

            total_profit, profit_per_item = calculate_profit(buying_price, selling_price, quantity)
            total_price = selling_price * quantity # Total price of items (identical)
            global Given_away
            Given_away = int(input("Enter the number of items given away:"))      #Number of items Benson gave away.
            global Worth_givenAway
            Worth_givenAway = Given_away * buying_price    #Cost of items which were given away.




            #we use the transaction dictionary to record the details of each single transaction
            transaction = {
                'date': datetime.datetime.now().strftime("%d-%m-%y"),
                'item_name': item_name,
                'buying_price': buying_price,
                'marked_price': marked_price,
                'selling_price': selling_price,
                'quantity': quantity,
                'Total_buying_price': Total_buying_price,
                'Total_price':  total_price,
                'total_profit': total_profit,
                'profit_per_item': profit_per_item,
                'Items_givenAway': Given_away,
                'Worth_ofItems': Worth_givenAway

            }

            #we append our new info from the transaction dictionary to transactions list
            transactions.append(transaction)

            #calls the write_to_file() function and passes a list of transactions as arguments
            write_to_file([transaction])
            print(" ")
            print("Message: Transaction recorded successfully!")

        elif choice == "2":
            read_file()

        elif choice == "3":
            total_profit = calculate_total_profit()
            print(" ")
            print(f"Message: The total profit for all sales: {total_profit}")

        elif choice == "4":
            profit_of_the_day = daily_profit()
            if profit_of_the_day > 0:
                print("")
                print(f"Message: The total profit for the day: {Day} is: {profit_of_the_day} ")

            elif profit_of_the_day < 0:
                profit_of_the_day = abs(profit_of_the_day)
                print("")
                print(f"Message: The total loss for the day: {Day} is: {profit_of_the_day} ")

            else:
                print("")
                print("Message: There is neither profit nor loss.")




        elif choice == "5":
            productProfit = calculate_product_profit()
            if productProfit > 0:

                print("")
                print(f"Message: The total profit for {product_name} is: {productProfit} ")

            elif productProfit < 0:
                print("")
                productProfit = abs(productProfit)
                print(f"Message: The total loss for {product_name} is: {productProfit}")

            else:
                print("")
                print("Message: There is neither profit nor loss.")




        elif choice == "6":
            net_profit = Total_income() - TotalExpenses()
            if net_profit > 0:
                print("")
                print(f"Message: Your NET PROFIT is:{net_profit}")

            elif net_profit < 0:
                net_profit = abs(net_profit)
                print("")
                print(f"Message: Your NET LOSS is: {net_profit}")

            else:
                print("")
                print(f"Message: Your NET PROFIT is:{net_profit}")


        elif choice == "7":
            remove_sale()

        elif choice == "8":
            print(" ")
            print("Message: Goodbye Mr. Benson. See you soon!")
            break

        else:
            print(" ")
            print("Message: Invalid choice. Please enter a valid option.")


        enter_choice=int(input("Would you like to calculate again?\n Enter: 1. To continue.\n 2. To exit."))



main()

